@tool # Run in the godot editor
class_name CurvedTerrainNode
extends Path2D


@export var edgeTexture: Texture2D
# Texture inside the terrain
@export var centerTexture: Texture2D
# show the visuals in the level without the collider getting in the way
@export var visibleCollision: bool = true
# Use linear texture filter NEAREST for pixel art
@export var textureFilter: TextureFilter = CanvasItem.TEXTURE_FILTER_LINEAR
@export var staticBodyCollisionLayer: int
@export var staticBodyCollisionMask: int


var polygon2d: Polygon2D # Visuals inside the terrain
var line2d: Line2D # Visuals for the edge of the terrain
var collisionPolygon2d: CollisionPolygon2D # collisions for the inside of the terrain

func _ready() -> void:
  # Programmatically derive the scene tree
  polygon2d = Polygon2D.new()
  polygon2d.texture_repeat = CanvasItem.TEXTURE_REPEAT_ENABLED
  add_child(polygon2d)
  
  line2d = Line2D.new()
  line2d.texture_repeat = CanvasItem.TEXTURE_REPEAT_ENABLED
  line2d.texture_mode = Line2D.LINE_TEXTURE_TILE
  
  add_child(line2d)
  
  var collisionStaticBody: StaticBody2D = StaticBody2D.new()
  collisionStaticBody.collision_layer = staticBodyCollisionLayer
  collisionStaticBody.collision_mask = staticBodyCollisionMask
  add_child(collisionStaticBody)
  collisionPolygon2d = CollisionPolygon2D.new()
  collisionStaticBody.add_child(collisionPolygon2d)
  texture_filter = textureFilter
  _generate_terrain()

func _process(dt: float) -> void:
  # ONLY RUN IN THE EDITOR save performance
  if not Engine.is_editor_hint():
    set_process(false)
    return
  _generate_terrain()
  
func _generate_terrain():
  if !curve or curve.point_count == 0:
    collisionPolygon2d.polygon = []
    polygon2d.polygon = []
    line2d.points = []
    return
  
  # store the points generated by the curve for both the points and collider
  var points = curve.get_baked_points()
  var colliderPoints = curve.get_baked_points()
  
  # Workaround you effectively cannot join the start and endpoints of aline
  # Instead overlapp the line where the joining would have occured
  if points.size() > 1:
    points.append(points[1])
  
  polygon2d.polygon = points
  polygon2d.texture = centerTexture
  
  line2d.points = points
  line2d.texture = edgeTexture
  
  # In order to have a valid collider we need more than 2 points
  if colliderPoints.size() > 2:
    collisionPolygon2d.polygon = colliderPoints
  
  collisionPolygon2d.visible = visibleCollision
  
    

  
  
  
